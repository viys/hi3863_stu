OUTPUT_ARCH( "riscv" )
ENTRY(_start)
#include "memory_config.h"
MEMORY
{
    /* ram for stack */
    STACK(xrw) :                ORIGIN = APP_SRAM_ORIGIN,                           LENGTH = LOADER_STACK_LEN
    /* ram for common bss and data */
    SRAM(xrw) :                 ORIGIN = APP_SRAM_ORIGIN + LOADER_STACK_LEN,        LENGTH = APP_SRAM_LENGTH - LOADER_STACK_LEN
    /* rom for loaderboot */
    LOADERBOOT_ROM_ADDR(xrw):     ORIGIN = LOADER_PROGRAM_ORIGIN,                       LENGTH = LOADER_PROGRAM_LENGTH
}

SECTIONS
{
    /* The startup code goes first into romboot */
    .text.entry :
    {
        . = ALIGN(4);
        KEEP(*(.text.entry))
        KEEP (*(.isr_vector))
        . = ALIGN(4);
    } > LOADERBOOT_ROM_ADDR

    /* Stack in SRAM at Highest addresses */
    .stacks (NOLOAD) :
    {
        . = ALIGN(16);
        g_system_stack_begin = ORIGIN(STACK);
        . += USER_STACK_LEN;
        __stack_top__ = .;
        . += IRQ_STACK_LEN;
        __irq_stack_top__ = .;
        . += EXCP_STACK_LEN;
        __excp_stack_top__ = .;
        . = ALIGN(16);
        g_system_stack_end = ORIGIN(STACK) + LENGTH(STACK);
    } > STACK

    .text :
    {
        . = ALIGN(4);
        *(.text)
        *(.text*)
        *(.rodata)
        *(.rodata*)
        *(.srodata)
        *(.srodata*)
        KEEP (*(.flashtext))
        KEEP (*(.flashtext*))
        . = ALIGN(4);
    } > LOADERBOOT_ROM_ADDR

    /* Initialised data */
    .data :
    {
        FILL(0xFF)
        . = ALIGN(4);
        __data_load__ = LOADADDR(.data);
        . = ALIGN(4);
        __data_begin__ = .;
        *(.data)
        *(.data*)
        *(.got)
        *(.got*)
        *(.igot)
        *(.igot*)
        _gp_ = . + 0x800;
        *(.sdata)
        *(.sdata*)
        . = ALIGN(4);
        __data_end__ = .;
    } > SRAM AT > LOADERBOOT_ROM_ADDR
    __data_size__ = __data_end__ - __data_begin__;

    /* Uninitialised data */
    .bss (NOLOAD) :
    {
        . = ALIGN(4);
        __bss_begin__ = .;
        *(.bss)
        *(.bss*)
        *(.sbss)
        *(.sbss*)
        *(COMMON)
        . = ALIGN(4);
        __bss_end__ = .;
    } > SRAM

    .preserve (NOLOAD) :
    {
        . = ALIGN(4);
        __boot_uart_begin__ = .;
        *(BOOT_UART)
        . = ALIGN(4);
        __boot_uart_end__ = .;
    } > SRAM

    .heap (NOLOAD):
    {
        . = ALIGN(8);
        g_intheap_begin = ABSOLUTE(.);
        g_intheap_size = (ORIGIN(SRAM) + LENGTH(SRAM)) - g_intheap_begin;
    } > SRAM

}
